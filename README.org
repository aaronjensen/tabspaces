This package leverages [[https://github.com/emacs-mirror/emacs/blob/master/lisp/tab-bar.el][tab-bar.el]] and [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/project.el][project.el]] (both built into emacs 27+) to
create buffer-isolated workspaces that also integrate with your
version-controlled projects. It should work with emacs 27+. It is tested to work
with a single frame workflow, but I can't guarantee that it will work with
multiple frames.

While other great packages exist for managing workspaces, such as [[https://github.com/alphapapa/bufler.el][bufler]],
[[https://github.com/nex3/perspective-el][perspective]] and [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]], this package is much less complex, and works
entirely based on the built-in (to emacs 27+) tab-bar and project packages. If
you like simple, this may be the workspace package for you. That said, bufler,
perspective or persp-mode, etc. may better fit your needs.

** Basic Usage

Calling the function =emacs-workspace/create-workspace= generates a new
buffer-isolated workspace using =tab.el= in the background. Using =switch-buffer=
(for =consult= integration see below) will only show buffers in the workspace (but
list-buffers, ibuffer, etc. will show all buffers). Adding buffers to a
workspace is as simple as opening the buffer in the workspace. Delete buffers
from a workspace by killing them (there is no other way currently to remove
them). Switch workspaces via =emacs-workspaces/switch-workspace= or
=tab-bar-switch-tab=. You can close a workspace by invoking
=emacs-workspaces/close-workspace= or =tab-bar-close-tab=.

You may also open an existing version-controlled project in its own workspace
using =emacs-workspaces/open-existing-project-and-workspace=, and create projects
in their own workspace using =emacs-workspace/create-new-project-and-workspace=. 

*NOTE* that this package does not modify =tab-bar=, =tab-line=, or =project= in any way.
It simply adds convenience functions for use with those packages. So it is still
up to the user to configure tabs, etc., however they like.  

** Installation

This package is not currently on Melpa, so you'll have to clone or otherwise
download the repo and put it into your load path. Here's one possible way of
setting it up using [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/raxod502/straight.el][straight]].

#+begin_src emacs-lisp
(use-package emacs-workspaces
  :straight (:type git :host github :repo "mclear-tools/emacs-workspaces")
  :commands (emacs-workspaces/create-workspace
             emacs-workspaces/create-new-project-and-workspace
             emacs-workspaces/open-existing-project-and-workspace
             emacs-workspaces/switch-workspace))
#+end_src

** Setup

*NOTE* that no keybindings are set.

If you have [[https://github.com/minad/consult][consult]] installed you might want to implement the following in your
config to have workspace buffers in =consult-buffer=:

#+begin_src emacs-lisp
  ;; Filter Buffers for Consult-Buffer

  (with-eval-after-load 'consult
    ;; hide full buffer list (still available with "b")
    (consult-customize consult--source-buffer :hidden t :default nil)
    ;; set consult-workspace buffer list
    (defvar consult--source-workspace
      (list :name     "Workspace Buffers"
            :narrow   ?w
            :category 'buffer
            :state    #'consult--buffer-state
            :default  t
            :items    (lambda ()
                        (emacs-workspaces--tab-bar-buffer-name-filter ((lambda () (consult--buffer-query :sort 'visibility
                                                                                                    :as #'buffer-name))))))

      "Set workspace buffer list for consult-buffer.")
    (push consult--source-workspace consult-buffer-sources))
#+end_src

This should seamlessly integrate workspace buffers into =consult-buffer=,
displaying workspace buffers by default and all buffers when narrowing using
"b". Note that you can also see all project related buffers and files just by
narrowing with "p" in [[https://github.com/minad/consult#configuration][a default consult setup]] with the following:

#+begin_src emacs-lisp 
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
#+end_src

By default the =*scratch*= buffer is included in all workspaces. You can modify
which buffers are included by changing the value of
=emacs-workspaces-workspace-create-permitted-buffer-names=.

If you want emacs to startup with initial buffers in a workspace (something I
find works well) you could do something like the following:

#+begin_src emacs-lisp
  (defun my--workspace-setup ()
    "Set up workspace at startup."
    ;; Add *Messages* and *splash* to Tab \`Home\'
    (progn
      (emacs-workspaces/create-workspace)
      (tab-bar-rename-tab "Home")
      (when (get-buffer "*Messages*")
        (set-frame-parameter nil
                             'buffer-list
                             (cons (get-buffer "*Messages*")
                                   (frame-parameter nil 'buffer-list))))
      (when (get-buffer "*splash*")
        (set-frame-parameter nil
                             'buffer-list
                             (cons (get-buffer "*splash*")
                                   (frame-parameter nil 'buffer-list))))))

  (add-hook 'after-init-hook #'my--workspace-setup)
#+end_src


